[project]
name = "torchview"
version = "0.2.3"
description = "Visualization of Pytorch Models"
readme = "README.md"
requires-python = ">=3.7"
license = {file = "LICENSE"}
keywords = [
    "pytorch", "visualization", "keras",
    "torch", "deep learning", "machine learning",
    "ml", "neural network"
]
authors = [
    {email = "kurttutan.mert@gmail.com"},
    {name = "Mert Kurttutan"}
]
maintainers = [
    {name = "Mert Kurttutan", email = "kurttutan.mert@gmail.com"}
]
classifiers = [
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.7",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
]

dependencies = [
]

[build-system]
requires = ["setuptools"]
build-backend = "setuptools.build_meta"

[project.urls]
homepage = "https://github.com/mert-kurttutan/torchview"
repository = "https://github.com/mert-kurttutan/torchview"


[tool.setuptools]
# Scan the project directory with the default parameters
packages = [
    'torchview',
    'torchview.computation_node'
]  

[tool.setuptools.package-data]
torchview = ["py.typed"]

[tool.mypy]
strict = true
implicit_reexport = true
show_error_codes = true
enable_error_code = 'ignore-without-code'
allow_untyped_calls = true
plugins = 'sqlalchemy.ext.mypy.plugin'



[[tool.mypy.overrides]]
module = [
    'pydub',
    'azure',
    'azure.cognitiveservices',
    'azure.cognitiveservices.speech',
    'requests',
    'tests.fixtures.models',
    'tests.fixtures.u_net',
    'tests.fixtures.dense_net',
    'tests.fixtures.custom_attention',
    'torchtext.functional',
    'transformers',
]
ignore_missing_imports = true


[tool.pylint."MESSAGES CONTROL"]
extension-pkg-whitelist = ["torch", "pydantic"]
enable = [
    "useless-suppression",
    "deprecated-pragma",
    "use-symbolic-message-instead",
]
disable = [
    "super-with-arguments",  # explicit is better
    "missing-module-docstring",
    "missing-function-docstring",
    "too-many-instance-attributes",
    "too-many-arguments",
    "too-many-branches",
    "too-many-locals",
    "invalid-name",
    "line-too-long",  # Covered by flake8
    "no-member",
    "fixme",
    "duplicate-code",
]

[tool.isort]
profile = "black"
known_third_party = ["fastapi", "pydantic", "starlette"]



[tool.ruff]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    # "I",  # isort
    "C",  # flake8-comprehensions
    "B",  # flake8-bugbear
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]

[tool.ruff.isort]
known-third-party = ["fastapi", "pydantic", "starlette"]